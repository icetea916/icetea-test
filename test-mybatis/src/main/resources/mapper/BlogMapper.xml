<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="life.icetea.test.mybatis.mapper.BlogMapper">

    <!--select属性详情:
        parameterType="int" // 将会传入这条语句的参数的类全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过类型处理器（TypeHandler）推断出具体传入语句的参数，默认值为未设置（unset）。
        resultType="hashmap" // 期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个
        resultMap="personResultMap" // 对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个
        flushCache="false" // 将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：对select false。对 insert、update 和 delete 语句 true。
        useCache="true" // 将其设置为 true 后，将会导致本条语句的结果被二级缓存缓存起来，默认值：对 select 元素为 true。
        timeout="10"    // 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。
        fetchSize="256" // 这是一个给驱动的建议值，尝试让驱动程序每次批量返回的结果行数等于这个设置值。 默认值为未设置（unset）（依赖驱动）。
        statementType="PREPARED" // 可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        resultSetType="FORWARD_ONLY" // FORWARD_ONLY，SCROLL_SENSITIVE, SCROLL_INSENSITIVE 或 DEFAULT（等价于 unset） 中的一个，默认值为 unset （依赖数据库驱动）。
        databaseId="mysql" // 如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。
        resultOrdered="false" // 这个设置仅针对嵌套结果 select 语句：如果为 true，将会假设包含了嵌套结果集或是分组，当返回一个主结果行时，就不会产生对前面结果集的引用。 这就使得在获取嵌套结果集的时候不至于内存不够用。默认值：false。
        resultSets="name" // 这个设置仅适用于多结果集的情况。它将列出语句执行后返回的结果集并赋予每个结果集一个名称，多个名称之间以逗号分隔。
    -->
    <select id="selectBlog" resultType="blog">
        select *
        from tb_blog
        where id = #{id}
    </select>

    <!--insert 属性详解:
        flushCache="true" //将其设置为 true 后，只要语句被调用，都会导致本地缓存和二级缓存被清空，默认值：（对 insert、update 和 delete 语句）true。
        timeout="20" //这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。
        statementType="PREPARED" // 可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        useGeneratedKeys="true" // （仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。
        keyProperty="" // （仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（unset）。如果生成列不止一个，可以用逗号分隔多个属性名称。
        keyColumn="" // （仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。
        databaseId="mysql" // 如果配置了数据库厂商标识（databaseIdProvider），MyBatis 会加载所有不带 databaseId 或匹配当前 databaseId 的语句；如果带和不带的语句都有，则不带的会被忽略。
    -->
    <insert id="insertBlog"
            parameterType="blog"
            flushCache="true"
            statementType="PREPARED"
            keyProperty="id"
            keyColumn="id"
            useGeneratedKeys="true"
            timeout="20">
        insert into tb_blog (text) values (#{text})
    </insert>

    <!--插入使用selectKey生成主键:
       keyProperty 	selectKey 语句结果应该被设置到的目标属性。如果生成列不止一个，可以用逗号分隔多个属性名称。
       keyColumn 	返回结果集中生成列属性的列名。如果生成列不止一个，可以用逗号分隔多个属性名称。
       resultType 	结果的类型。通常 MyBatis 可以推断出来，但是为了更加准确，写上也不会有什么问题。MyBatis 允许将任何简单类型用作主键的类型，包括字符串。如果生成列不止一个，则可以使用包含期望属性的 Object 或 Map。
       order 	可以设置为 BEFORE 或 AFTER。如果设置为 BEFORE，那么它首先会生成主键，设置 keyProperty 再执行插入语句。如果设置为 AFTER，那么先执行插入语句，然后是 selectKey 中的语句 - 这和 Oracle 数据库的行为相似，在插入语句内部可能有嵌入索引调用。
       statementType 	和前面一样，MyBatis 支持 STATEMENT，PREPARED 和 CALLABLE 类型的映射语句，分别代表 Statement, PreparedStatement 和 CallableStatement 类型。
   -->
    <insert id="insertBlogWithSelectKey" >
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="BEFORE" statementType="PREPARED">
            SELECT LAST_INSERT_ID()
            <!-- DB2中的生成方式 select CAST(RANDOM()*1000000 as INTEGER) a from SYSIBM.SYSDUMMY1-->
        </selectKey>
        insert into tb_blog (text) values (#{text})
    </insert>

    <!--批量插入, 也可返回自动生成的主键-->
    <insert id="insertBlogBatch" useGeneratedKeys="true" keyProperty="id">
        insert into tb_blog (text) values
        <foreach collection="list" separator="," item="blog">
            (#{blog.text})
        </foreach>
    </insert>


    <update id="updateBlog"
            parameterType="blog"
            flushCache="true"
            statementType="PREPARED"
            timeout="20">
        update tb_blog set text = #{text} where id = #{id}
    </update>

    <delete id="deleteById"
            parameterType="int"
            flushCache="true"
            statementType="PREPARED"
            timeout="20">
        delete from tb_blog where id = #{id}
    </delete>

</mapper>